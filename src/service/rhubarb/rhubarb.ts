import path from "path";
import { GetPhonemesOptions, Phoneme } from "./rhubarb-common";
import { execCommand } from "@/utils/exec-command";
import { promises as fs } from "fs";

const getPhonemes = async (
  options: GetPhonemesOptions,
): Promise<Phoneme | undefined> => {
  const { audioFilePath, audioFileName } = options;
  try {
    const time = new Date().getTime();
    const fileName = `${audioFilePath}/${audioFileName}`;

    // Build the path to the Rhubarb binary dynamically
    const rhubarbBinaryPath = path.join(
      process.cwd(),
      ".tools",
      "rhubarb",
      "rhubarb",
    );

    // Convert mp3 â†’ wav via ffmpeg
    console.info(
      "[Rhubarb]",
      `Starting conversion to wav for audio ${audioFileName}`,
    );
    await execCommand({
      command: `ffmpeg -y -i ${fileName}.mp3 ${fileName}.wav`,
    });
    console.info(
      "[Rhubarb]",
      `Conversion to wav done in ${new Date().getTime() - time}ms`,
    );

    // Now run the Rhubarb command
    await execCommand({
      command: `${rhubarbBinaryPath} -f json -o ${fileName}.json ${fileName}.wav -r phonetic`,
    });
    console.info(
      "[Rhubarb]",
      `LipSync done in ${new Date().getTime() - time}ms`,
    );

    // Parse the JSON output generated by Rhubarb
    const data = await fs.readFile(`${fileName}.json`, "utf8");
    return JSON.parse(data) as Phoneme;
  } catch (error) {
    console.error(
      "[Rhubarb]",
      `Error while getting phonemes for audio ${audioFileName}:`,
      error,
    );
  }
};

export const Rhubarb = {
  getPhonemes,
};
